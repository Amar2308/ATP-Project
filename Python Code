{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fc45f4b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9bcea356",
   "metadata": {},
   "outputs": [],
   "source": [
    "# list all the required column names from all the datasets\n",
    "columns = [\n",
    "    'tourney_id', \n",
    "    'tourney_name', \n",
    "    'surface', \n",
    "    'draw_size', \n",
    "    'tourney_level',\n",
    "    'tourney_date', \n",
    "    'match_num', \n",
    "    'winner_id', \n",
    "    'winner_seed', \n",
    "    'winner_entry',\n",
    "    'winner_name',\n",
    "    'winner_hand', \n",
    "    'winner_ht', \n",
    "    'winner_ioc', \n",
    "    'winner_age', \n",
    "    'winner_rank', \n",
    "    'winner_rank_points', \n",
    "    'loser_id',\n",
    "    'loser_seed',\n",
    "    'loser_entry',\n",
    "    'loser_name',\n",
    "    'loser_hand',\n",
    "    'loser_ht',\n",
    "    'loser_ioc',\n",
    "    'loser_age',\n",
    "    'loser_rank',\n",
    "    'loser_rank_points',\n",
    "    'score',\n",
    "    'best_of', \n",
    "    'round',\n",
    "    'minutes', \n",
    "    'w_ace', \n",
    "    'w_df', \n",
    "    'w_svpt',\n",
    "    'w_1stIn', \n",
    "    'w_1stWon', \n",
    "    'w_2ndWon',\n",
    "    'w_SvGms', \n",
    "    'w_bpSaved', \n",
    "    'w_bpFaced',\n",
    "    'l_ace',\n",
    "    'l_df',\n",
    "    'l_svpt',\n",
    "    'l_1stIn',\n",
    "    'l_1stWon',\n",
    "    'l_2ndWon',\n",
    "    'l_SvGms',\n",
    "    'l_bpSaved',\n",
    "    'l_bpFaced'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9859a1e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Combine data for the past 11 years (2011-2021)\n",
    "# Use concat function and use index=True to avoiding duplicatio of ID\n",
    "tennis_dt = pd.concat([\n",
    "    pd.read_csv('./atp_matches_2011.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2012.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2013.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2014.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2015.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2016.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2017.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2018.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2019.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2020.csv', usecols=columns),\n",
    "    pd.read_csv('./atp_matches_2021.csv', usecols=columns)\n",
    "    ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6864dfb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tourney_id</th>\n",
       "      <th>tourney_name</th>\n",
       "      <th>surface</th>\n",
       "      <th>draw_size</th>\n",
       "      <th>tourney_level</th>\n",
       "      <th>tourney_date</th>\n",
       "      <th>match_num</th>\n",
       "      <th>winner_id</th>\n",
       "      <th>winner_seed</th>\n",
       "      <th>winner_entry</th>\n",
       "      <th>...</th>\n",
       "      <th>l_1stIn</th>\n",
       "      <th>l_1stWon</th>\n",
       "      <th>l_2ndWon</th>\n",
       "      <th>l_SvGms</th>\n",
       "      <th>l_bpSaved</th>\n",
       "      <th>l_bpFaced</th>\n",
       "      <th>winner_rank</th>\n",
       "      <th>winner_rank_points</th>\n",
       "      <th>loser_rank</th>\n",
       "      <th>loser_rank_points</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-339</td>\n",
       "      <td>Brisbane</td>\n",
       "      <td>Hard</td>\n",
       "      <td>32</td>\n",
       "      <td>A</td>\n",
       "      <td>20110102</td>\n",
       "      <td>1</td>\n",
       "      <td>104417</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>27.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5580.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>309.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-339</td>\n",
       "      <td>Brisbane</td>\n",
       "      <td>Hard</td>\n",
       "      <td>32</td>\n",
       "      <td>A</td>\n",
       "      <td>20110102</td>\n",
       "      <td>2</td>\n",
       "      <td>103582</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>59.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>835.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>643.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-339</td>\n",
       "      <td>Brisbane</td>\n",
       "      <td>Hard</td>\n",
       "      <td>32</td>\n",
       "      <td>A</td>\n",
       "      <td>20110102</td>\n",
       "      <td>3</td>\n",
       "      <td>105051</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "      <td>...</td>\n",
       "      <td>58.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>263.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>243.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-339</td>\n",
       "      <td>Brisbane</td>\n",
       "      <td>Hard</td>\n",
       "      <td>32</td>\n",
       "      <td>A</td>\n",
       "      <td>20110102</td>\n",
       "      <td>4</td>\n",
       "      <td>104797</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>43.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>1031.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>975.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-339</td>\n",
       "      <td>Brisbane</td>\n",
       "      <td>Hard</td>\n",
       "      <td>32</td>\n",
       "      <td>A</td>\n",
       "      <td>20110102</td>\n",
       "      <td>5</td>\n",
       "      <td>103888</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>37.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>600.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  tourney_id tourney_name surface  draw_size tourney_level  tourney_date  \\\n",
       "0   2011-339     Brisbane    Hard         32             A      20110102   \n",
       "1   2011-339     Brisbane    Hard         32             A      20110102   \n",
       "2   2011-339     Brisbane    Hard         32             A      20110102   \n",
       "3   2011-339     Brisbane    Hard         32             A      20110102   \n",
       "4   2011-339     Brisbane    Hard         32             A      20110102   \n",
       "\n",
       "   match_num  winner_id  winner_seed winner_entry  ... l_1stIn l_1stWon  \\\n",
       "0          1     104417          1.0          NaN  ...    27.0     16.0   \n",
       "1          2     103582          NaN          NaN  ...    59.0     42.0   \n",
       "2          3     105051          NaN            Q  ...    58.0     42.0   \n",
       "3          4     104797          8.0          NaN  ...    43.0     31.0   \n",
       "4          5     103888          4.0          NaN  ...    37.0     24.0   \n",
       "\n",
       "   l_2ndWon l_SvGms  l_bpSaved  l_bpFaced  winner_rank winner_rank_points  \\\n",
       "0      12.0     9.0        1.0        4.0          5.0             5580.0   \n",
       "1      20.0    14.0        3.0        5.0         58.0              835.0   \n",
       "2       6.0    14.0        4.0        8.0        196.0              263.0   \n",
       "3      17.0    11.0        2.0        3.0         40.0             1031.0   \n",
       "4      11.0     8.0        3.0        6.0         16.0             1991.0   \n",
       "\n",
       "  loser_rank loser_rank_points  \n",
       "0      173.0             309.0  \n",
       "1       75.0             643.0  \n",
       "2      204.0             243.0  \n",
       "3       43.0             975.0  \n",
       "4       83.0             600.0  \n",
       "\n",
       "[5 rows x 49 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tennis_dt.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a49fd248",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the resulting data in an excel file\n",
    "writer = pd.ExcelWriter('tennis_dataset.xlsx')\n",
    "\n",
    "tennis_dt.to_excel(writer,'clean_data', index=False)\n",
    "\n",
    "writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51ee4212",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
